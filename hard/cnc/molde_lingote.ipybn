{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Rig Cartesiano</h1>\n",
    "\n",
    "<h2>Lista de materiais</h2>\n",
    " 1 - Tubo de alumínio de 4.76mm para fixação de parafusos - 10,00<br/>\n",
    " 2 - Placa de alumínio de 10cm x 40cm para cortar fixadores - 15,50<br/>\n",
    " 3 - 22 rolamentos 607 zz - 2,80 x 22 = 61,60<br/>\n",
    " 4 - 22 parafusos M4 Allen 35mm - 40 peças a 20,18<br/>\n",
    " 5 - Aprox 23 metros de perfil de alumino 20mm vslot 6 22,00 o m -> 506,00<br/>\n",
    " 6 - Quatro correntes de rolo 1/2 - 3/32 de bicicleta - entre 9,90 e 12,00 cada -> 39,60<br/>\n",
    " 7 - Aprox 40m de cabo de aço - imagino q 1/8 7x19 revestido seja ok -> 84,00<br/>\n",
    " 8 - Quatro Roquetas feitas sobre medida - ?<br/>\n",
    " 9 - Motor Z - Sanyo 10,0 Kgf/cm - 100,00 <br/>\n",
    "10 - Roletes - 23 roletes montados em perfil de aluminio - 52,44 <br/>\n",
    "11 - Rolamento 6006 para suporte do eixo Z - 13,00 <br/>\n",
    "12 - Dez barras roscadas de 3/8\" x 1m - 70,00 ?<br/>\n",
    "13 - Dois motores de 3.5Kgf/cm 12V x 0.4A - 5W - 200,00 (já tenho)<br/>\n",
    "14 - Seis metros de cantoneira de aço perfurada - 15,00<br/>\n",
    "15 - Vinte junções sextavadas 3/8\" = 15,00<br/>\n",
    "16 - Quatorze (14) porcas olhais com furo M6 - 50,00 (reduzir p 4 - 15.40 e substituir poe 10 clips + 8,60 ?)<br/> \n",
    "17 - Dezesseis (16) clips para cabo de aço - 13,00 <br/>\n",
    "18 - Seis (6) tijolos para contra-peso - 10,00 <br/>\n",
    "19 - Duas flanges de acoplamento para os motores X e Y - 24,00 <br/>\n",
    "20 - Parafuso eixo de patins - 3,75 <br/>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Lista de Perfis de aço</h2>\n",
    " <br/>\n",
    "quantidade x tamanho em milimetros <br/>\n",
    " <br/>\n",
    " 2 x 1300 <br/>\n",
    " 1 x 1240 <br/>\n",
    " 3 x 1184 <br/>\n",
    " 4 x 1164 <br/>\n",
    " 1 x 1152 <br/>\n",
    " 1 x 1120 <br/>\n",
    " 1 x 1068 <br/>\n",
    " 2 x 1054 <br/>\n",
    " 3 x 1050 <br/>\n",
    " 2 x 1048 <br/>\n",
    " 1 x 983 <br/>\n",
    " 1 x 460 <br/>\n",
    " 1 x 417 <br/>\n",
    " 1 x 404 <br/>\n",
    " 3 x 350 <br/>\n",
    " 1 x 307 <br/>\n",
    " 3 x 272 <br/>\n",
    " 1 x 234 <br/>\n",
    " 7 x 214 <br/>\n",
    " 1 x 160 <br/>\n",
    " 3 x 140 <br/>\n",
    " 3 x 134 <br/>\n",
    " 5 x 120 <br/>\n",
    "19 x 115 <br/>\n",
    " 2 x 110 <br/>\n",
    " 4 x 102 <br/>\n",
    " 2 x 99 <br/>\n",
    " 8 x 94 <br/>\n",
    " 2 x 90,5 <br/>\n",
    " 1 x 87 <br/>\n",
    " 3 x 67 <br/>\n",
    " 1 x 62 <br/>\n",
    " 7 x 60 <br/>\n",
    " 2 x 59 <br/>\n",
    " 5 x 48 <br/>\n",
    " 1 x 40 <br/>\n",
    " 2 x 25 <br/>\n",
    "43 x 20 <br/>\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Estimativa de torque dos motores</h2>\n",
    "\n",
    "Peso do perfil: 0,409kg/m<br/>\n",
    "Peso dos rolamentos: aprox 10g<br/>\n",
    "Peso dos M4 allen 35mm: aprox 4g<br/>\n",
    "\n",
    "As estimativas iniciais chegaram no peso de 10Kg para o carro + carga, com uma necessidade de motor de 45W (!) e 6Nm. O custo de um motor assim chega na casa dos R$ 1000,00.<br/>\n",
    "\n",
    "Dessa forma precisamos acrescentar um contra-peso para minimizar o motor Z.\n",
    "\n",
    "<h3>Motor Z</h3>\n",
    "<b>Torque</b><br/>\n",
    "<br/>\n",
    "O carrinho utiliza 88cm = 360 gramas de perfil + 80g rolamentos + 32g M4 = 452g. Considerando 500g <br/>\n",
    "O carro X utiliza 5m112 = 2091g + 80g 607zz + 32g M4 = 2203g. Considerando 2500g <br/>\n",
    "O carro Y utiliza 9m032 = 3694g + 60g 607zz + 24g M4 = 3778g. Considerando 4000g <br/>\n",
    "<br/>\n",
    "Carga de trabalho esperada: 2000g (utilizando 3000g) <br/>\n",
    "<br/>\n",
    "Logo o total de massa a ser erguido é 10Kg. <br/>\n",
    "<br/>\n",
    "Vamos considerar utilizar um contra-peso de 8Kg (que pode ser ajustado para ficar mais pesado ou mais leve se necessario). <br/>\n",
    "<br/>\n",
    "Torque para superar a gravidade: 20N (19,6 arredondado) <br/>\n",
    "<br/>\n",
    "Aceleração projetada: 2m/s2 -> 4N <br/>\n",
    "<br/>\n",
    "Total 24N. <br/>  \n",
    "<br/>\n",
    "Raio da engrenagem dentada: 35mm <br/>\n",
    "Torque = 0,96Nm / 96Ncm / 9,6Kgf/cm <br/>\n",
    "<br/>\n",
    "<b>Potencia</b><br/>\n",
    "<br/>\n",
    "Considerando a velocidade máxima de 0,3m/s <br/>\n",
    "Potência = 24N x 0,3m/s = 7,2W (a 12V, corrente de 1A) <br/>\n",
    "<br/>\n",
    "<b>Caso real</b><br/>\n",
    "<br/>\n",
    "Considerando utilizar um motor Sanyo 103h7124 10Kgf/cm a curva de torque cai abaixo de 8,4 em cerca de 0,36m/s o que quer dizer que a maquina provavelmente vai conseguir atingir a velocidade de ascenção projetada ou próximo disso.<br/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Projeto das Roquetas (Sprockets)</h2>\n",
    "<h3>Vou chamar as peças de Roquetas, seguindo o nome rocchetto em italiano, porque pinhão é um nome ridiculo em portugues</h3>\n",
    "<br/>\n",
    "Com 25 dentes teremos a precisão de 0.1mm no eixo Z com um erro de <br/>\n",
    "10 segmentos de corrente = 10 x 12.7mm = 127mm, dividido por 200 x 16 = 0.0396875mm <br/>\n",
    "O Erro para 0.04 = 0.0003125 ( 0,7% ), e com 25 passos por mm teremos um erro de 8 microns por mm <br/>\n",
    "A base será então um poligono regular de 10 lados, cada lado com 12.7mm. <br/>\n",
    "Pitch (12,7) / 2 = r.seno( ang/2 ) <br/>\n",
    "O que implica um circulo com raio de 20.549mm <br/>\n",
    "Os rolamentos da corrente adquirida para o projeto tem 0.306\" ( 7.7724mm ). Considerando-se os 8 microns de erro, pode-se considerar 7.78mm ) <br/>\n",
    "<br/>\n",
    "Será uma roqueta de dez dentes então. Para o projeto utilizaremos o dente que fica exatamente a 90o. Os itens que compoe o dente são: <br/>\n",
    "<br/>\n",
    "A - Elementos de suporte: <br/>\n",
    " 1 - C1 = circulo de raio r, centro na origem <br/>\n",
    " 2 - Or1 - centro do rolamento 1, em C1 em 90 + ang/2 <br/>\n",
    " 3 - Or2 - centro do rolamento 2, em C1 em 90 - ang/2 <br/>\n",
    " 4 - Rolamento 1 - Cr1 - circulo de centro em Or1 e raio 7.78 / 2 (rr - raio do rolamento) <br/>\n",
    " 5 - Rolamento 2 - Cr2 - circulo de centro em Or2 e raio rr <br/>\n",
    " 6 - Circulo de suporte 1 - Cs1 - 12.7mm de raio, centro em Or1 <br/>\n",
    " 7 - Circulo de suporte 2 - Cs2 - 12.7mm de raio, centro em Or2 <br/>\n",
    " 8 - Posiçao de referencia de rolamento 1 - Cref1 - circulo centro em Cs1, em angulo = ang com centro em Or1, 2o ponto em Or2, raio rr <br/>\n",
    " 9 - Posiçao de referencia de rolamento 2 - Cref2 - circulo centro em Cs2, em angulo = ang com centro em Or2, 2o ponto em Or1, raio rr <br/>\n",
    "10 - Cint - Circulo de raio r - rr, centro na origem <br/>\n",
    "<br/>\n",
    "B - Elementos de construção <br/>\n",
    " 1 - Arco sobre Cr1 que inicia em 360 - ( 180 - 90 - 18 ) = 288o e termina em 0o <br/>\n",
    " 2 - Reta que vai até Cref2, angulo 270 + 72 = 342o <br/>\n",
    " 3 - Reta que vai até Cref1, angulo 270 - 72 = 198o <br/>\n",
    " 4 - Reta que vai até Cr2, angulo 180o <br/>\n",
    " 5 - Arco em Cr2, de 180o até 180 + 72 = 252o <br/>\n",
    "<br/>\n",
    "A peça é formada por 10 dentes, rotacionados ang com relacao uns aos outros <br/>\n",
    "<br/>\n",
    "Ref da corrente: https://www.usarollerchain.com/Stainless-Steel-Roller-Chain-s/1857.htm <br/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A seguir calculos de lados do poligono base da roqueta e  posicao dos elos da corrente de rolos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lados do pol regular:<br/>\n",
    "Pt( 0 ) - ( 50.549, 30 ) <br/>\n",
    "(cx, cy) + <br/>\n",
    "Lado( 1 ) - Reta( Pt( 0 ), ( cos(36) x 20.549 = 16.625, - sin(36) x 20.549 = - 12.078 ) => Pt1( 46.625, 17.922 )) <br/>\n",
    "2 - ( cos(72) x 20.549 = 6.35, - sin(72) x 20.549 = - 19.543 ) => 36.35, 10.457 <br/>\n",
    "3 - ( cos( 108 x 20.549 = -6.35, - sin( 108 ) x 20.549 = - 19.543 ) => 23.65, 10.457 <br/>\n",
    "4 - ( cos( 144 x 20.549 = -16.625, - sin( 144 ) x 20.549 = - 12.078 ) => 13.375, 17.922 <br/>\n",
    "5 - ( -20.549, 0 ) => 9.451, 30 <br/>\n",
    "6 - ( cx + 4x, cy - 4y ) => 13.375, 42.078 <br/>\n",
    "7 - ( cx + 3x, cy - 3y ) => 23.65, 49.543 <br/>\n",
    "8 - ( cx + 2x, cy - 2y ) => 36.35, 49.543 <br/>\n",
    "9 - ( cx + 1x, cy - 1y ) => 46.625, 42.078 <br/>\n",
    "<br/>\n",
    "L( 0 ) -> Reta( Pt( 9 ), Pt( 0 )) <br/>\n",
    "<br/>\n",
    "Elos de corrente C(0) a C(9) com cx,cy em Pt(0) a Pt(9)<br/>\n",
    "<br/>\n",
    "Pos de elos se aproximando da roqueta: <br/>\n",
    "e1 => (x0, y0 - 12.7) => 50.549, 17.3 <br/>\n",
    "e2 => (x5, y5 - 12.7) => 9.451, 17.3 <br/>\n",
    "e3 => (x0, e1 - 12.7) => 50.459, 4.6 <br/>\n",
    "e4 => (x0, e2 - 12.7) => 9.451, 4.6 <br/>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A seguir cálculos dos elementos de construção: <br/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a seguir cálculos do arco 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br/>\n",
    "Arco 1 - A1 - ponto inicial <br/>\n",
    "(r - rr) . cos( 90 + 18 ), (r - rr) . sin( 90 + 18 ) <br/>\n",
    "-5.148 15.844 (+  ref 30,30 ) = M24.852 14.156 <br/>\n",
    "<br/>\n",
    "ponto final <br/>\n",
    "r.cos( 108 ) - 3.89, r.sin( 108 ) <br/>\n",
    "-2.46 19.543 (+ ref 30,30 ) = 27.54 10.457 <br/>\n",
    "<br/>\n",
    "A 3.89 3.89 0 0 0 27.54 10.457 <br/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arcos gerados\n"
     ]
    }
   ],
   "source": [
    "from math import sin, cos, acos, radians, degrees, sqrt\n",
    "\n",
    "r = 20.549\n",
    "rr = 3.89\n",
    "ang = 36.0\n",
    "pos_ang = 90.0\n",
    "ref = ( 30.0, 30.0 )\n",
    "\n",
    "x1 = r * cos( radians( 108 )) + 3.89\n",
    "# cos( nang ) = x1/r -> nang = acos( x1/r )\n",
    "p1_ang = acos( x1 / r )\n",
    "p1_ang = degrees( p1_ang ) - 90.0\n",
    "\n",
    "y1 = r * sin( radians( pos_ang + 18.0 ))\n",
    "p1_r = sqrt( x1 * x1 + y1 * y1 )\n",
    "\n",
    "paths = []\n",
    "\n",
    "for _pos_ang in range(0, 360, 36 ):\n",
    "    _pos_ang = 360.0 - _pos_ang \n",
    "    pos_ang = float( _pos_ang ) + 90.0\n",
    "    \n",
    "    path = \"%3Cpath d='M \" \n",
    "    \n",
    "    p1 = ( (r - rr) * cos( radians( pos_ang + ang / 2.0 )), -(r - rr) * sin( radians( pos_ang + ang / 2.0 )))\n",
    "    p1 = ( p1[ 0 ] + ref[ 0 ], p1[ 1 ] + ref[ 1 ])\n",
    "    path = path + str( p1[ 0 ]) + \" \" + str( p1[ 1 ]) + \" \"\n",
    "    \n",
    "    p2 = ( p1_r * cos( radians( pos_ang + p1_ang )), -p1_r * sin( radians( pos_ang + p1_ang )))\n",
    "    p2 = ( p2[ 0 ] + ref[ 0 ], p2[ 1 ] + ref[ 1 ])\n",
    "    \n",
    "    path = path + \" A \" + str( rr ) + \" \" + str( rr ) + \" 0 0 0 \" + str( p2[ 0 ]) + \" \" + str( p2[ 1 ]) + \" \"\n",
    "    \n",
    "    paths.append( path )\n",
    "\n",
    "print( \"arcos gerados\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a seguir cálculos das retas até Cref1, Cref2 e Cr2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retas geradas\n"
     ]
    }
   ],
   "source": [
    "from math import sin, cos, acos, radians, degrees, sqrt\n",
    "\n",
    "r = 20.549\n",
    "rr = 3.89\n",
    "ang = 36.0\n",
    "pos_ang = 90.0\n",
    "ref = ( 30.0, 30.0 )\n",
    "Csr = 12.7\n",
    "\n",
    "pnum = 0\n",
    "\n",
    "for _pos_ang in range( 0, 360, 36 ):\n",
    "    _pos_ang = 360.0 - _pos_ang \n",
    "    pos_ang = float( _pos_ang ) + 90.0\n",
    "\n",
    "    Or1 = ( r * cos( radians( pos_ang + ang / 2.0 )), r * sin( radians( pos_ang + ang / 2.0 ))) \n",
    "    Or2 = ( r * cos( radians( pos_ang - ang / 2.0 )), r * sin( radians( pos_ang - ang / 2.0 )))\n",
    "    \n",
    "    Cref2 = ( Or2[ 0 ] + Csr * cos( radians( pos_ang + ( 90.0 - ang / 2.0 ))), Or2[ 1 ] + Csr * sin( radians( pos_ang + ( 90.0 - ang / 2.0 ))))\n",
    "    rt1 = ( Cref2[ 0 ] + rr * cos( radians( 180.0 + pos_ang + 72.0 )), Cref2[ 1 ] + rr * sin( radians( 180.0 + pos_ang + 72.0 ))) \n",
    "    \n",
    "    rt1 = ( rt1[ 0 ] + ref[ 0 ], ref[ 1 ] - rt1[ 1 ])\n",
    "    \n",
    "    paths[ pnum ] += \" L \" + str( rt1[ 0 ]) + \" \" + str( rt1[ 1 ]) \n",
    "    \n",
    "    Cref1 = ( Or1[ 0 ] + Csr * cos( radians( pos_ang + ang / 2.0 - 90.0 )), Or1[ 1 ] + Csr * sin( radians(  pos_ang + ang / 2.0 - 90.0 )))\n",
    "    rt2 = ( Cref1[ 0 ] + rr * cos( radians( 180.0 + pos_ang - 72.0 )), Cref1[ 1 ] + rr * sin( radians( 180.0 + pos_ang - 72.0 ))) \n",
    "    rt2 = ( rt2[ 0 ] + ref[ 0 ], ref[ 1 ] - rt2[ 1 ])\n",
    "\n",
    "    paths[ pnum ] += \" \" + str( rt2[ 0 ]) + \" \" + str( rt2[ 1 ]) \n",
    "\n",
    "    rt3 = ( Or2[ 0 ] + rr * cos( radians( pos_ang + 90.0 )), Or2[ 1 ] + rr * sin( radians( pos_ang + 90.0 )))\n",
    "    rt3 = ( rt3[ 0 ] + ref[ 0 ], ref[ 1 ] - rt3[ 1 ])\n",
    "\n",
    "    paths[ pnum ] += \" \" + str( rt3[ 0 ]) + \" \" + str( rt3[ 1 ]) \n",
    "\n",
    "    pnum += 1\n",
    "\n",
    "print( \"retas geradas\" )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a seguir cálculos do arco 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "%3Cpath d='M 24.852085890707755 14.156349495039036  A 3.89 3.89 0 0 0 27.641948547963572 10.44417809300532  L 27.9711823088505 7.734299926207601 32.02881769114951 7.734299926207601 32.4599902174108 10.456739646650892 A 3.89 3.89 0 0 0 35.14791410929225 14.156349495039038 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 35.14791410929225 14.156349495039038  A 3.89 3.89 0 0 0 39.586920015081546 12.79297987061755  L 41.44610214471411 10.794161130198688 44.7287981259711 13.179179367094179 43.477414109292255 15.635116219224253 A 3.89 3.89 0 0 0 43.477414109292255 20.208085482059694 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 43.477414109292255 20.208085482059694  A 3.89 3.89 0 0 0 47.87001388386503 21.714278492550257  L 50.54900000000001 21.190000000000005 51.802878290107486 25.04904057108526 49.34692389188146 26.300390151611857 A 3.89 3.89 0 0 0 46.659 30.000000000000004 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 46.659 30.000000000000004  A 3.89 3.89 0 0 0 49.32736982844458 33.80044110901275  L 51.80287829010748 34.95095942891475 50.54899999999999 38.81 47.82656632552934 38.378789300969885 A 3.89 3.89 0 0 0 43.47741410929225 39.79191451794031 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 43.47741410929225 39.79191451794031  A 3.89 3.89 0 0 0 43.40232741169753 44.434964394074726  L 44.728798125971096 46.82082063290583 41.446102144714104 49.205838869801326 39.49706632552934 47.25677572193139 A 3.89 3.89 0 0 0 35.147914109292245 45.84365050496096 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 35.147914109292245 45.84365050496096  A 3.89 3.89 0 0 0 32.35805145203643 49.55582190699468  L 32.028817691149506 52.265700073792395 27.971182308850487 52.2657000737924 27.540009782589202 49.54326035334911 A 3.89 3.89 0 0 0 24.852085890707748 45.84365050496096 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 24.852085890707748 45.84365050496096  A 3.89 3.89 0 0 0 20.41307998491847 47.20702012938246  L 18.55389785528589 49.20583886980131 15.271201874028902 46.82082063290582 16.522585890707745 44.36488378077575 A 3.89 3.89 0 0 0 16.52258589070775 39.791914517940306 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 16.52258589070775 39.791914517940306  A 3.89 3.89 0 0 0 12.129986116134976 38.28572150744975  L 9.450999999999997 38.809999999999995 8.197121709892514 34.95095942891474 10.653076108118544 33.69960984838814 A 3.89 3.89 0 0 0 13.341000000000001 29.999999999999996 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 13.341000000000001 29.999999999999996  A 3.89 3.89 0 0 0 10.672630171555415 26.199558890987255  L 8.19712170989252 25.04904057108525 9.451 21.189999999999998 12.173433674470662 21.621210699030115 A 3.89 3.89 0 0 0 16.522585890707752 20.208085482059687 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
      "%3Cpath d='M 16.522585890707752 20.208085482059687  A 3.89 3.89 0 0 0 16.59767258830246 15.565035605925287  L 15.271201874028906 13.179179367094175 18.553897855285896 10.794161130198681 20.50293367447066 12.74322427806861 A 3.89 3.89 0 0 0 24.85208589070775 14.156349495039036 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n"
     ]
    }
   ],
   "source": [
    "from math import sin, cos, acos, radians, degrees, sqrt\n",
    "\n",
    "pnum = 0\n",
    "\n",
    "for _pos_ang in range( 0, 360, 36 ):\n",
    "    _pos_ang = 360.0 - _pos_ang \n",
    "    pos_ang = float( _pos_ang ) + 90.0\n",
    "    \n",
    "    p3 = ( (r - rr) * cos( radians( pos_ang - ang / 2.0 )), -(r - rr) * sin( radians( pos_ang - ang / 2.0 )))\n",
    "    p3 = ( p3[ 0 ] + ref[ 0 ], p3[ 1 ] + ref[ 1 ])\n",
    "    \n",
    "    paths[ pnum ] += \" A \" + str( rr ) + \" \" + str( rr ) + \" 0 0 0 \" + str( p3[ 0 ]) + \" \" + str( p3[ 1 ]) + \" \"\n",
    "    paths[ pnum ] += \"' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\"\n",
    "\n",
    "    print( paths[ pnum ])\n",
    "    pnum += 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img width=\"260\" height=\"260\" style=\"border: 1px solid black\" src=\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 60 60'%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23FF0000;stroke-width:0.1' cx='30' cy='30' rx='20.549' ry='20.549'/%3E\n",
    "          %3Cpath d='M50.549 30 L46.625 17.922 36.35, 10.457 23.65, 10.457 13.375, 17.922 9.451, 30 13.375, 42.078 23.65, 49.543 36.35, 49.543 46.625, 42.078 z' style='fill:transparent;stroke:%23999999;stroke-width:0.1'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='46.625' cy='17.922' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='36.35' cy='10.457' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='23.65' cy='10.457' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='13.375' cy='17.922' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='9.451' cy='30' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='13.375' cy='42.078' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='23.65' cy='49.543' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='36.35' cy='49.543' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='46.625' cy='42.078' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='50.549' cy='30' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='50.549' cy='17.3' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='9.451' cy='17.3' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='50.549' cy='4.6' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='9.451' cy='4.6' rx='3.89' ry='3.89'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='30' cy='30' rx='24.439' ry='24.439'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='30' cy='30' rx='16.659' ry='16.659'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='30' cy='30' rx='15.659' ry='15.659'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23999999;stroke-width:0.1' cx='30' cy='30' rx='8.6' ry='8.6'/%3E                                         \n",
    "%3Cpath d='M 24.852085890707755 14.156349495039036  A 3.89 3.89 0 0 0 27.641948547963572 10.44417809300532  L 27.9711823088505 7.734299926207601 32.02881769114951 7.734299926207601 32.4599902174108 10.456739646650892 A 3.89 3.89 0 0 0 35.14791410929225 14.156349495039038 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 35.14791410929225 14.156349495039038  A 3.89 3.89 0 0 0 39.586920015081546 12.79297987061755  L 41.44610214471411 10.794161130198688 44.7287981259711 13.179179367094179 43.477414109292255 15.635116219224253 A 3.89 3.89 0 0 0 43.477414109292255 20.208085482059694 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 43.477414109292255 20.208085482059694  A 3.89 3.89 0 0 0 47.87001388386503 21.714278492550257  L 50.54900000000001 21.190000000000005 51.802878290107486 25.04904057108526 49.34692389188146 26.300390151611857 A 3.89 3.89 0 0 0 46.659 30.000000000000004 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 46.659 30.000000000000004  A 3.89 3.89 0 0 0 49.32736982844458 33.80044110901275  L 51.80287829010748 34.95095942891475 50.54899999999999 38.81 47.82656632552934 38.378789300969885 A 3.89 3.89 0 0 0 43.47741410929225 39.79191451794031 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 43.47741410929225 39.79191451794031  A 3.89 3.89 0 0 0 43.40232741169753 44.434964394074726  L 44.728798125971096 46.82082063290583 41.446102144714104 49.205838869801326 39.49706632552934 47.25677572193139 A 3.89 3.89 0 0 0 35.147914109292245 45.84365050496096 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 35.147914109292245 45.84365050496096  A 3.89 3.89 0 0 0 32.35805145203643 49.55582190699468  L 32.028817691149506 52.265700073792395 27.971182308850487 52.2657000737924 27.540009782589202 49.54326035334911 A 3.89 3.89 0 0 0 24.852085890707748 45.84365050496096 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 24.852085890707748 45.84365050496096  A 3.89 3.89 0 0 0 20.41307998491847 47.20702012938246  L 18.55389785528589 49.20583886980131 15.271201874028902 46.82082063290582 16.522585890707745 44.36488378077575 A 3.89 3.89 0 0 0 16.52258589070775 39.791914517940306 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 16.52258589070775 39.791914517940306  A 3.89 3.89 0 0 0 12.129986116134976 38.28572150744975  L 9.450999999999997 38.809999999999995 8.197121709892514 34.95095942891474 10.653076108118544 33.69960984838814 A 3.89 3.89 0 0 0 13.341000000000001 29.999999999999996 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 13.341000000000001 29.999999999999996  A 3.89 3.89 0 0 0 10.672630171555415 26.199558890987255  L 8.19712170989252 25.04904057108525 9.451 21.189999999999998 12.173433674470662 21.621210699030115 A 3.89 3.89 0 0 0 16.522585890707752 20.208085482059687 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "%3Cpath d='M 16.522585890707752 20.208085482059687  A 3.89 3.89 0 0 0 16.59767258830246 15.565035605925287  L 15.271201874028906 13.179179367094175 18.553897855285896 10.794161130198681 20.50293367447066 12.74322427806861 A 3.89 3.89 0 0 0 24.85208589070775 14.156349495039036 ' style='fill:transparent;stroke:%23000000;stroke-width:0.2'/%3E\n",
    "          %3Cellipse style='fill:transparent;stroke:%23000000;stroke-width:0.2' cx='30' cy='30' rx='9.1' ry='9.1'/%3E       \n",
    "          %3Cellipse style='fill:transparent;stroke:%23000000;stroke-width:0.2' cx='30' cy='17.5' rx='1.55' ry='1.55'/%3E       \n",
    "          %3Cellipse style='fill:transparent;stroke:%23000000;stroke-width:0.2' cx='30' cy='42.5' rx='1.55' ry='1.55'/%3E       \n",
    "          %3Cellipse style='fill:transparent;stroke:%23000000;stroke-width:0.2' cx='17.5' cy='30' rx='1.55' ry='1.55'/%3E       \n",
    "          %3Cellipse style='fill:transparent;stroke:%23000000;stroke-width:0.2' cx='42.5' cy='30' rx='1.55' ry='1.55'/%3E       \n",
    "           %3C/svg%3E\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Montagem do Carrinho</h2>\n",
    "<b>1 - Montar 8 conjuntos de rolamento 607zz com parafusos M4</b><br/>\n",
    "=> rcLB-1, rcLB-2, rcLT-1, rcLT-2 (roller, carrinho, Left, Bottom, Top)<br/> \n",
    "=> + rcRB-1, rcRB-2, rcRT-1, rcRT-2 (Right)<br/> \n",
    "<br/>\n",
    "<b>2 - Montar duas peças de 160mm para formar uma peça de (xyz) 160/20/40</b><br/>\n",
    "b160-1 + b160-2 = pcLB-1 (beam, parede)<br/>\n",
    "<br/>\n",
    "<b>b160-1</b><br/>\n",
    "Furar e rosquear M4 b160-1 no eixo Y em 40mm e 120mm em X <br/>\n",
    "Furar e rosquear M5 b160-1 no eixo Y em 150mm <br/>\n",
    "Furar e rosquear M5 b160-1 no eixo Z em 60mm e 100mm<br/>\n",
    "<br/>\n",
    "<b>b160-2</b><br/>\n",
    "Furar e rosquear M4 b160-2 no eixo Y em 40mm e 120mm <br/>\n",
    "Furar e rosquear M5 b160-2 no eixo Y em 10mm <br/>\n",
    "Furar e rosquear M5 b160-2 no eixo Z em 30mm e 144mm <br/>\n",
    "<br/>\n",
    "<b>pcLB-1</b><br/>\n",
    "Fixar b160-1 em b160-2 (1 abaixo de 2) com parafusos M5 nos furos no eixo Z em 60 e 100 com 2 porcas de v-slot M5.<br/>\n",
    "Fixar os quatro rollers (rcLB-1, rcLB-2, rcLT-1 e rcLT-2) nos furos M4 em 40mm e 120mm no eixo Y com porcas v-slot M4 (abaixo, somente no lado esquerdo). Os parafusos dos rollers de baixo terão que ser cortados, mas isso fica para passo de ajuste posterior.<br/>\n",
    "<br/>\n",
    "<b>3 - Montar uma peça de 140mm e uma de 160mm para formar uma peça de (xyz) 160/20/40</b><br/>\n",
    "b140-1 + b160-3 = pcRB-1<br/>\n",
    "<br/>\n",
    "<b>b140-1</b><br/>\n",
    "Furar e rosquear M4 b140-1 no eixo Y em 40mm e 120mm em X <br/>\n",
    "Furar e rosquear M5 b140-1 no eixo Z em 60mm e 100mm<br/>\n",
    "<br/>\n",
    "<b>b160-3</b><br/>\n",
    "Furar e rosquear M4 b160-2 no eixo Y em 40mm e 120mm <br/>\n",
    "Furar e rosquear M5 b160-2 no eixo Y em 10mm <br/>\n",
    "Furar e rosquear M5 b160-2 no eixo Z em 30mm e 144mm <br/>\n",
    "<br/>\n",
    "<b>pcRB-1</b><br/>\n",
    "Fixar b140-1 em b160-3 (1 abaixo de 3) com parafusos M5 nos furos no eixo Z em 60 e 100 com 2 porcas de v-slot M5.<br/>\n",
    "Fixar os quatro rollers (rcRB-1, rcRB-2, rcRT-1 e rcRT-2) nos furos M4 em 40mm e 120mm no eixo Y com porcas v-slot M4 (abaixo, somente no lado direito). Os parafusos dos rollers de baixo terão que ser cortados, mas isso fica para passo de ajuste posterior.<br/>Fixar pMontar uma peça de 140mm e uma de 160mm para formar uma peça de (xyz) 160/20/40</b><br/>\n",
    "<br/>\n",
    "<b>4 - Unir pcLB-1 em pcRB-1</b><br/>\n",
    "=> + b140-2 e b120-1<br/>\n",
    "Unir pcLB-1 e pcRB-1 utilizando b120-1 utilizando os furos M5 no eixo Y em 10mm, fixando-os no eixo M5 central da peça b120-1.<br/>\n",
    "<br/>\n",
    "<b>b140-2</b><br/>\n",
    "Furar e rosquear M5 no eixo Y de b140-2 em 130mm.<br/>\n",
    "<br/>\n",
    "Unir pcLB-1 e b140-2 utilizando o furo M5 no eixo Y em 150mm no eixo M5 central da peça b140-2.<br/>\n",
    "Unir pcRB-1 e b140-2 utilizando o furo M5 no eixo Y em 130mm no eixo M5 central da peça inferior de pcRB-1.<br/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
